import React, { ReactElement, useEffect, useState } from "react";

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import MerchantLayout from "@/components/Layout/MerchantLayout";
import { GetServerSideProps } from "next";
import { useMerchant } from "@/store/merchant/useMerchant";
import { IProduct } from "@/pages";
import ProductCard from "@/components/Card/ProductCard";
import { ratingFormat } from "@/utils/uniUtils";
import Link from "next/link";
import Head from "next/head";
import UniPagination from "@/components/Pagination/UniPagination";
import { formatIDR } from "@/utils/formatIDR";
import { IPaginationData } from "@/interfaces/pagination";

export interface IMerchant {
  id: number;
  name: string;
  phone_number: string;
  rating: number;
  opening_date: string;
  user_id: number;
  user_name: string;
  photo: string;
  banner: string;
  address: {
    id: number;
    user_id: number;
    phone_number: string;
    name: string;
    province: string;
    province_code: number;
    district: string;
    district_code: number;
    sub_district: string;
    sub_sub_district: string;
    zip_code: number;
    details: string;
    is_shop_location: boolean;
    is_default: boolean;
  };
  created_at: string;
  updated_at: string;
}

export interface IMerchantProps {
  merchant: IMerchant;
  products: IProduct[];
  pagination_info: IPaginationData;
}

const Merchant = ({ merchant, products, pagination_info }: IMerchantProps) => {
  const { setMerchant, getPromotion, setPaginationInfo } =
    useMerchant.getState();
  const merchantData = useMerchant.use.merchant();
  const promotions = useMerchant.use.promotions();
  const pageInformation = useMerchant.use.pageInformation();
  const [pageManagement, setPageManagement] = useState<{
    page: number;
  }>({
    page: 1,
  });

  useEffect(() => {
    if (merchant) {
      setMerchant(merchant);
      setPaginationInfo(pagination_info);
      getPromotion(merchant.user_name, pageManagement.page);
    }
  }, [pageManagement]);

  const onClickChangePage = (key: string, value: number) => {
    setPageManagement({
      ...pageManagement,
      [key]: value,
    });
  };

  const onClickNextChangePage = (key: string) => {
    setPageManagement({
      ...pageManagement,
      [key]: pageManagement.page + 1,
    });
  };

  const onClickPrevChangePage = (key: string) => {
    setPageManagement({
      ...pageManagement,
      [key]: pageManagement.page - 1,
    });
  };

  if (!merchantData || !pageInformation) {
    return (
      <Head>
        <title>{`${merchant.name} | Platypus`}</title>

        <meta name="platypus" content="Generated by create next app" />

        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <link rel="icon" href="/vm4/favicon.ico" />
      </Head>
    );
  }

  return (
    <>
      <Head>
        <title>{merchant.name} | Platypus</title>

        <meta name="platypus" content="Generated by create next app" />

        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <link rel="icon" href="/vm4/favicon.ico" />
      </Head>
      <main className="min-w-screen flex min-h-screen flex-col items-center pt-5">
        <p className="mt-3 w-full px-2 font-medium md:px-5">Merchants Deals</p>
        <div className="mt-5  grid w-full grid-cols-2 gap-2 px-2 md:grid-cols-3 md:px-5 lg:grid-cols-5">
          {promotions?.length == 0 && (
            <p className="md:px-1">No vouchers to show.</p>
          )}
          {promotions?.map((promotion) => {
            return (
              <Card className="rounded-none" key={promotion.id}>
                <CardHeader className="relative h-32 p-5">
                  <CardDescription>Discount Voucher</CardDescription>
                  <CardTitle className="absolute left-0 top-14 rounded-r-lg bg-primary/20 px-5 py-3 text-lg font-semibold shadow">
                    {promotion.voucher_code}
                  </CardTitle>
                </CardHeader>
                <CardContent className="p-5">
                  <div className="flex flex-col items-start gap-1 md:flex-row md:items-center">
                    <p className="text-lg font-semibold">
                      {promotion.promotion_type == "CUT"
                        ? formatIDR(promotion.amount)
                        : `${promotion.amount * 100}%`}
                    </p>
                    <p>
                      {promotion.promotion_type == "DISC" &&
                        promotion.max_amount &&
                        `until ${formatIDR(parseInt(promotion.max_amount))}`}
                    </p>
                  </div>
                  <CardDescription className="mt-3 text-xs">
                    {promotion.promotion_scope == "PRODUCT" &&
                      `*available on selected products`}
                  </CardDescription>
                </CardContent>
              </Card>
            );
          })}
        </div>
        <div className="my-10 flex justify-center">
          <UniPagination
            onClickChangePage={onClickChangePage}
            onClickNextChangePage={onClickNextChangePage}
            onClickPrevChangePage={onClickPrevChangePage}
            pageInformation={pageInformation}
          />
        </div>
        <div className="mt-8 flex w-full justify-between px-2 md:px-5">
          <p className="font-medium">Most Popular Products</p>
          <Link
            href={`/merchant/${merchant.user_name}/products/all`}
            className="text-primary hover:text-inherit"
          >
            View all products
          </Link>
        </div>
        <div className="xl:grid-cols-6-prod-card grid w-full min-w-[348px] grid-cols-2-prod-card justify-evenly gap-2 gap-y-3 px-2 py-5 md:grid-cols-4-prod-card md:gap-y-10 md:px-5 md:py-10">
          {products.length == 0 && (
            <p className="md:px-1">No products to show.</p>
          )}
          {products.map((item: IProduct) => {
            return (
              <ProductCard
                id={item.id}
                key={item.id}
                url={item.photo}
                name={item.title}
                price={parseInt(item.min_price)}
                city={item.city}
                rating={ratingFormat(item.average_rating)}
                sold={item.total_sold}
              />
            );
          })}
        </div>
      </main>
    </>
  );
};

Merchant.getLayout = function getLayout(page: ReactElement) {
  return <MerchantLayout>{page}</MerchantLayout>;
};

export const getServerSideProps: GetServerSideProps = async ({
  params,
}: any) => {
  if (!params || !params.name) {
    return {
      notFound: true,
    };
  }
  const response = await fetch(
    `${process.env.BASE_API_URL}/merchants/${params.name}`,
  );
  const resultJSON = await response.json();
  const merchant = resultJSON.data;
  console.log(merchant);

  if (!merchant) {
    return {
      notFound: true,
    };
  }

  const responseProducts = await fetch(
    `${process.env.BASE_API_URL}/merchants/${params.name}/products?exclude_not_active=true&exclude_no_stock=true&limit=6`,
  );
  const resultJSONProducts = await responseProducts.json();
  const products = resultJSONProducts.data;
  const pagination_info = resultJSONProducts.meta.pagination_info;

  return {
    props: {
      merchant,
      products,
      pagination_info,
    },
  };
};

export default Merchant;
