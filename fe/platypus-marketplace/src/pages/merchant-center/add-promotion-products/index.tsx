import { AddProductPromotionForm } from "@/components/Form/AddProductPromotionForm";
import UserSellerLayout from "@/components/Layout/UserSellerLayout";
import Modal from "@/components/Modal/Modal";
import useDebounce from "@/hooks/useDebounce";
import { useMyList } from "@/store/myList/useMyList";
import { useUser } from "@/store/user/useUser";
import Head from "next/head";
import React, { ReactElement, useEffect, useState } from "react";

const AddPromotionProducts = () => {
  const userData = useUser.use.userData();
  const { getProductList, pageInformation } = useMyList();
  const [search, setSearch] = useState<string>("");
  const [tableManagement, setTableManagement] = useState<{
    page: number;
    exclude_no_stock: boolean;
    sort_by: string;
    sort: "asc" | "desc";
    exclude_not_active: boolean;
  }>({
    page: 1,
    exclude_no_stock: false,
    sort_by: "",
    sort: "asc",
    exclude_not_active: false,
  });

  const onChangeSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearch(e.target.value);
    setTableManagement({
      ...tableManagement,
      page: 1,
    });
  };

  const debounchedSearch = useDebounce(search);
  const debounchedFilter = useDebounce(tableManagement);

  const onChangeFilter = (key: string, value: number | string | boolean) => {
    setTableManagement({
      ...tableManagement,
      page: 1,
      [key]: value,
    });
  };

  const onClickChangePage = (key: string, value: number) => {
    setTableManagement({
      ...tableManagement,
      [key]: value,
    });
  };

  const onClickNextChangePage = (key: string) => {
    setTableManagement({
      ...tableManagement,
      [key]: tableManagement.page + 1,
    });
  };

  const onClickPrevChangePage = (key: string) => {
    setTableManagement({
      ...tableManagement,
      [key]: tableManagement.page - 1,
    });
  };

  useEffect(() => {
    if (userData) {
      getProductList(
        debounchedFilter.page,
        debounchedFilter.exclude_no_stock,
        debounchedFilter.sort_by,
        debounchedFilter.sort,
        userData.username,
        debounchedSearch,
        debounchedFilter.exclude_not_active,
      );
    }
  }, [debounchedFilter, debounchedSearch, userData]);

  if (!pageInformation) {
    return null;
  }

  return (
    <>
      <Head>
        <title>Add Product Promotion | Seller Platypus</title>
        <meta name="platypus" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/vm4/favicon.ico" />
      </Head>
      <main className="min-w-screen flex min-h-screen flex-col px-3 lg:ml-[20vw] lg:px-32">
        <Modal backDropClose />
        <AddProductPromotionForm
          onChangeSearch={onChangeSearch}
          onChangeFilter={onChangeFilter}
          onClickChangePage={onClickChangePage}
          onClickNextChangePage={onClickNextChangePage}
          onClickPrevChangePage={onClickPrevChangePage}
          pageInformation={pageInformation}
        />
      </main>
    </>
  );
};

AddPromotionProducts.getLayout = function getLayout(page: ReactElement) {
  return <UserSellerLayout>{page}</UserSellerLayout>;
};

export default AddPromotionProducts;
