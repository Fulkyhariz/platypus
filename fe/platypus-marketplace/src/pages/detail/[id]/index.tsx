import React, { ReactElement, useEffect } from "react";
import UserLayout from "@/components/Layout/UserLayout";
import CategoryBreadcrumbs from "@/components/Category/CategoryBreadcrumbs";
import ProductDetailManage from "@/components/ProductDetails/ProductDetailManage";
import { Link as ToSection } from "react-scroll";
import { useNavBar } from "@/store/navbar/useNavBar";
import { IProductDetail } from "@/interfaces/productDetail";
import { useProdDetail } from "@/store/prodDetail/useProdDetail";
import ProductDetailDescriptions from "@/components/ProductDetails/ProductDetailDescriptions";
import ProductMerchantInfo from "@/components/ProductDetails/ProductMerchantInfo";
import ProductImages from "@/components/ProductDetails/ProductImages";
import ProductDetailRecommendation from "@/components/ProductDetails/ProductDetailRecommendation";
import { GetServerSideProps } from "next";
import ProductReviewContainer from "@/components/ProductDetails/ProductReviewContainer";
import Head from "next/head";
import { useUser } from "@/store/user/useUser";
import ModalUpSlide from "@/components/Modal/ModalUpSlide";
import HeaderLined from "@/components/Header/HeaderLined";
import ProductDetailMobileManage from "@/components/ProductDetails/ProductDetailMobileManage";

interface IProductDetailsPage {
  productData: IProductDetail;
}

const ProductDetails = ({ productData }: IProductDetailsPage) => {
  console.log(productData);

  const userData = useUser.use.userData();
  const navHeight = useNavBar.use.navHeight();
  const { setProductDetail, getFavoriteStatus, getProductRecommendation } =
    useProdDetail.getState();

  useEffect(() => {
    setProductDetail(productData);
    getProductRecommendation(productData);

    if (userData) {
      getFavoriteStatus(productData.product_id);
    }
  }, [userData, productData]);

  return (
    <>
      <Head>
        <title>{`${productData.product_name} | Platypus`}</title>
        <meta name="platypus" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/vm4/favicon.ico" />
      </Head>
      <main className="min-w-screen min-h-screen gap-3 px-3 pb-10 pt-16 md:px-28 md:pt-32 2xl:px-72 ">
        <ModalUpSlide backDropClose />
        <CategoryBreadcrumbs />
        <div className="relative">
          <div
            style={{ top: `${navHeight}px` }}
            className="sticky z-10 flex justify-center text-xs md:text-base"
          >
            <div className="mb-5 mt-3 w-fit space-x-4">
              <ToSection
                to="section1"
                spy={true}
                smooth={true}
                duration={500}
                offset={-navHeight - 60}
                className="tab-link cursor-pointer rounded-full border-[1px] border-border bg-background px-5 py-2 shadow-md transition-colors hover:border-primary hover:bg-primary hover:text-primary-foreground hover:transition-colors "
              >
                Detail
              </ToSection>
              <ToSection
                to="section2"
                spy={true}
                smooth={true}
                duration={500}
                offset={-navHeight}
                className="tab-link cursor-pointer rounded-full border-[1px] border-border bg-background px-5 py-2 shadow-md transition-colors hover:border-primary hover:bg-primary hover:text-primary-foreground hover:transition-colors "
              >
                Review
              </ToSection>
              <ToSection
                to="section3"
                spy={true}
                smooth={true}
                duration={500}
                offset={-navHeight}
                className="tab-link cursor-pointer rounded-full border-[1px] border-border bg-background px-5 py-2 shadow-md transition-colors hover:border-primary hover:bg-primary hover:text-primary-foreground hover:transition-colors "
              >
                Suggest
              </ToSection>
            </div>
          </div>
          <article className="text-sm lg:flex xl:text-base">
            <div className="w-full">
              <section
                id="section1"
                style={{ minHeight: `calc(100vh - ${navHeight}px)` }}
                className="section lg:relative lg:flex lg:gap-3"
              >
                <div
                  style={{ top: `${navHeight + 20}px` }}
                  className={`lg:min-h-64 xl:min-h-80 left-0 h-fit w-full rounded-lg border-[1px] border-border bg-background shadow-md max-md:border-none max-md:shadow-none lg:sticky lg:w-64 xl:min-w-[20rem]`}
                >
                  <ProductImages />
                </div>
                <div className="mt-5 flex flex-1 flex-col justify-between overflow-hidden px-3 lg:mt-0 lg:w-80 lg:px-5 xl:px-10">
                  <ProductDetailDescriptions />
                  <div>
                    <ProductMerchantInfo />
                  </div>
                </div>
              </section>

              <section
                id="section2"
                style={{ minHeight: `calc(100vh - ${navHeight}px)` }}
                className="section lg:relative lg:flex lg:gap-3"
              >
                <ProductReviewContainer id={productData.product_id} />
              </section>
            </div>
            <ProductDetailMobileManage />
            <div className="hidden lg:block">
              <div
                style={{ top: `${navHeight + 20}px` }}
                className={`right-0 rounded-lg border-[1px] border-border p-3 lg:sticky lg:min-h-[12rem] lg:w-48 xl:min-h-[16rem] xl:w-64`}
              >
                <ProductDetailManage />
              </div>
            </div>
          </article>
          <section
            id="section3"
            style={{ minHeight: `calc(100vh - ${navHeight}px)` }}
            className="section"
          >
            <HeaderLined className="mb-5 pt-[3.750rem]">
              More in this store
            </HeaderLined>
            <ProductDetailRecommendation />
          </section>
        </div>
      </main>
    </>
  );
};

export default ProductDetails;

ProductDetails.getLayout = function getLayout(page: ReactElement) {
  return <UserLayout>{page}</UserLayout>;
};

export const getServerSideProps: GetServerSideProps = async ({
  params,
}: any) => {
  const response = await fetch(
    `${process.env.BASE_API_URL}/products/${params?.id}`,
  );

  const product = await response.json();

  if (!params || !params.id || response.status === 404) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      productData: product.data,
    },
  };
};
